В Java символьная строка представляет собой последовательность символов.В отличие от других языков программирования, где
символьные строки представлены последовательностью символов, в Java они являются объектами класса String. В результате
создания объекта типа String получается неизменяемая символьная строка, т.е. невозможно изменить символы имеющейся
строки. При любом изменении строки создается новый объект типа String, содержащий все изменения. Если требуются
изменяемые строки, могут быть использованы классы StringBuilder и StringBuffer.

Создание строк
String s1 = "Java";
String s2 = new String("Home");
String s3 = new String(new char[]{'A', 'B', 'C'});
String s4 = new String(s3);
String s5 = new String(new byte[]{65, 66, 67});
String s6 = new String(new byte[]{0, 65, 0, 66}, StandardCharsets.UTF_16);

В примере выше представлена лишь часть возможных вариантов. Самым простым способом является создание строки по аналогии
с s1. Обычно строки требуется создавать с начальными значениями. Для этого предоставлены разнообразные конструкторы. При
использовании варианта s2 в памяти создается новый экземпляр строки с начальным значением “Home”. Если в программе есть
массив символьных строк, то из них можно собрать строку с помощью конструктора, которому в качестве аргумента передается
ссылка на массив char[]. Если нужно создать объект типа String, содержащий ту же последовательность символов, что и
другой объект типа String, можно использовать вариант s4. Варианты s5 и s6 позволяют «построить» строку из байтового
массива без указания кодировки или с ней. Если кодировка не указана, будет использована ASCII.

Конкатенация строк
C помощью операции + можно соединять две символьные строки, порождая в итоге объект типа String. Операции сцепления
символьных строк можно объединять в цепочку.

StringPool - область памяти в хипе, котороя хранит уникальные значения строк, помогает оптимизировать работу состроками
String a = "Java";                  выделяется память в пуле строк
String b = "Java";                  новая память в пуле не выделяется, в переменную копируется ссылка из переменной a
String c = new String ("Java"); -   выделяется отдельная память в хипе

Если мы в рантайме меняем строку, то она попадает в хип
a + "1";

Методы класса String
.intern - строка, которая лежит в хипе положить в стринг пул

StringBuilder
В отличие от класса String класс StringBuilder представляет собой изменяемые последовательности символов. В классе
StringBuilder определены следующие четыре конструктора: StringBuilder(), StringBuilder (int size),
StringBuilder (String obj), StringBuilder (CharSequence obj). Первый конструктор по умолчанию резервирует место для 16
символов. Второй конструктор принимает целочисленный аргумент, задающий размер буфера. Третий конструктор принимает
аргумент типа String, задающий начальное содержимое объекта типа StringBuilder и резервирующий место для 16 символов.
Выделение места для 16 дополнительных символов позволяет сэкономить время, затрачиваемое на перераспределение памяти при
незначительных изменениях начальной строки. Четвертый конструктор создает объект из последовательности символов.

Методы StringBuilder:
int length() Получение длины строки.

int capacity() Получение объема выделенной памяти.

void ensureCapacity(int minimumCapacity) Предварительное выделение места для определенного количества символов после
создания объекта типа StringBuffer, чтобы установить емкость буфера. Это удобно, если заранее известно, что к объекту
типа StringBuffer предполагается присоединить большое количество мелких символьных строк.

void setLength(int length) Установка длины строки. Если указанная длина больше текущей, то в конце строки добавляются
пустые символы, если меньше - символы, оказавшиеся за пределами вновь заданной длины строки, удаляются.

public StringBuilder reverse() - разворачивает в обратную сторону

void append(...) Присоединение любого типа данных в конце вызывающего объекта.

StringBuffer
Класс StringBuffer отличается от класса StringBuilder только тем, что он является потокобезопасным.

Использование System.out.printf
System.out.printf("Слово: %s, Число с плавающей запятой: %f, Целое число: %d,
Символ: %c", "Java", 2.5f, 20, 'e');
Результат:
Слово: Java, Число с плавающей запятой: 2,500000, Целое число: 20, Символ: e

