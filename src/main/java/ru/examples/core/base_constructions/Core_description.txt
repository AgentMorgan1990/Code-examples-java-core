В этом блоке представлено описание основных конструкций языка (переменные, операторы, клюевые слова и т.п.)

Компиляция программы
С:\> javac Example.java - Компилятор javac создаст файл Example.class , содержащий версию байткода. Байт-код Java
является промежуточным представлением программы, содержащим инструкции, которые будет выполнять виртуальная машина JVМ.

C:\> java Example - вызов загрузчика приложений jаvа, который называется java. Ему нужно передать имя класса Example в
качестве аргумента командной строки

Использование блоков кода
В языке Java два и более оператора допускается группировать в блоки кода, называемые также кодовыми блоками. С этой
целью операторы заключают в фигурные скобки. Сразу после своего создания блок кода становится логической единицей, и
поэтому выполнение одной части блока невозможно без выполнения другой части блока. Блоки кода обладают дополнительными
свойствами и областями применения. Но их основное назначение - создание логически неразрывных единиц кода.

Лексика
Исходный текст программ на Java состоит из совокупности пробелов, идентификаторов, литералов, комментариев, операторов,
разделителей и ключевых слов.

Пробелы
Java - язык свободной формы. Это означает, что при написании программы не нужно следовать каким-то специальным правилам
в отношении отступов. Единственное обязательное требование - наличие, по меньшей мере, одного пробела между всеми
лексемами, которые еще не разграничены оператором или разделителем. В языке Java пробелами считаются символы пробела,
табуляции или новой строки.

Идентификаторы
Для именования классов, методов и переменных служат идентификаторы. Идентификатором может быть любая последовательность
строчных и прописных букв, цифр или символов подчеркивания и денежной единицы. (Знак денежной единицы не предназначается
для общего использования.) Идентификаторы не должны начинаться с цифры, чтобы компилятор не путал их с числовыми
константами. Напомним еще раз, что в J ava учитывается регистр символов, и поэтому VALUE и Value считаются разными
идентификаторами.

Идентификаторы – это имена переменных, которые начинаются с буквы, $ или _, после чего может идти любая последовательность
символов. Идентификаторы чувствительны к регистру.
В качестве идентификаторов нельзя использовать ключевые слова Java.

Литералы
В Java постоянное значение задается его литералъным представлением. В качестве примера ниже показано несколько литералов.
Литерал можно использовать везде, где допустимо применение значений данного типа.

Комментарии - 3 вида
1) Односторочные //
2) Многострочные /*   */
3) Документирующий /** */ Этот вид комментариев служит для создания НТМL-файла документации на программу.

Разделители
В Java допускается применение нескольких символов в качестве разделителей. Чаще всего в качестве разделителя
употребляется точка с запятой, но точка с запятой употребляется также для завершения строк операторов. Символы,
допустимые в качестве разделителей, перечислены в табл. 2.2.

( ) Круглые скобки    - Употребляются для передачи списков параметров в определениях и вызовах методов. Применяются также
                        для обозначения операции приведения типов и предшествования операторов в выражениях, употребляемых
                        в управляющих операторах

{ } Фигурные скобки   - Употребляются для указания значений автоматически инициализируемых массивов, а также для определения
                        блоков кода, классов, методов и локальных областей действия

[ ] Квадратные скобки - Употребляются для объявления типов массивов, а также при обращении к элементам массивов

:   Точка с запятой   - Завершает операторы

,   Запятая           - Разделяет последовательный ряд идентификаторов в объявлениях переменных. Применяются также для
                        создания цепочек операторов в операторе цикла for

.   Точка             - Употребляется для отделения имен пакетов от подпакетов и классов, а также для отделения
                        переменной или метода от ссылочной переменной

Ключевые слова Java
В настоящее время в языке Java определено 50 ключевых слов, которые вместе с синтаксисом операторов и разделителей
образуют основу языка Java. Их нельзя использовать ни в качестве идентификаторов, ни для обозначения имен переменных,
классов или методов.
Кроме ключевых слов, в Java зарезервированы также слова true, false и null. Они представляют значения, определенные в
спецификации языка java. Их нельая использовать для обозначения имен переменных, классов и т.п.

В более широком смысле среда Java опирается на несколько встроенных библиотек классов, содержащих многие встроенные
методы, обеспечивающие подцержку таких операций, как ввод-вывод, обработка символьных строк, работа в сети и отображение
графиков. Стандартные классы обеспечивают также подцержку ГПИ. Таким образом, среда Java в целом состоит из самого языка
Java и его стандартных классов.


Переменные и типы данных

В Java существует две группы типов данных.
● Примитивные(простые).
● Ссылочные (объектные)

В языке jаvа определены восемь примитивных типов данных:
Целые числа:
byte    - 8-битное знаковое целое число                                     от -128 до 127
short   - 16-битное знаковое целое число                                    от -32_768 до 32_767
int     - 32-битное знаковое целое число                                    от -2_147_483_648 до 2_147_483_647 (2 трл.)
long    - 64-битное знаковое целое число                                    от -9_223_372_036_854_775_808 до 9_223_372_036_854_775_807
При указании значений типа byte и short в выражениях их тип продвигается к типу in t при вычислении выражения.

Числа с плавающей точкой (действительные числа):
float   - 32-битное знаковое число с плавающей запятой одинарной точности   от 1.4е-045 до З.4е+ОЗ8
double  - 64-битное знаковое число с плавающей запятой двойной точности     от 4.9е-324 до 1.8е+308

Символы:
char    - 16-битный тип данных, предназначенный для хранения символов
в кодировке Unicode   от '\u0000' или 0 до '\uffff' или 65,535
Набор символов в коде ASCII занимает первые 127 значений из набора символов в Юникоде. Поэтому все прежние приемы,
применяемые для обращения с символами в других языках программирования, вполне пригодны и для jаvа.
В формальной спецификации Java тип cha r упоми нается как целочисленный, а это означает, что он относится к той же общей
категории, что и типы int, short, long и byte. Но поскольку основное назначение типа char - представлять символы в
Юникоде, то онотносится к собственной отдельной категории.

Логические значения:
boolean - логический тип данных                                             false, true

Литералы
Литерал — это элемент программы, который непосредственно представляет значение.

Целочисленные литералы
Любое целочисленное значение является числовым литералом. Примерами тому могут служить значения 1, 2, 3 и 42. Все они
являются десятичными значениями, описывающими числа по основанию 10. В целочисленных литералах могут использоваться
числа по еще двум основаниям: восьмеричные (по основанию 8) и шестнадцатеричные (по основанию 16).

В Java восьмеричные значения обозначаются начальным нулем, тогда как обычные десятичные числа не могут содержать
начальный нуль. Таким образом, вполне допустимое, казалось бы, значение 09 приведет к ошибке компиляции, поскольку
значение 9 выходит за пределы допустимых восьмеричных значений от О до 7.

Программисты часто пользуются шестнадцатеричным представлением чисел, которое соответствует словам по длине 8, 16, 32
и 64 бит, состоящим из 8-разрядных блоков. Значения шестнадцатеричных констант обозначают начальным нулем и
символом х (Ох или ОХ). Шестнадцатеричные цифры должны указываться в пределах от О до 15, поэтому цифры от 10 до 15
заменяют буквами от А до F (или от а до f).

Целочисленные литералы создают значение типа int, которое в Java является 32-битовым целочисленным значением. Когда
значение литерала присваивается переменной типа byte или short, ошибки не происходит, если значение литерала находится
в диапазоне допустимых значений данного типа.
При использовании переменной типа long, после числа необходимо ставить букву L. long longValue = 20000000000L;
или  Ox7ffffffffffffffL
Целочисленное значение типа long можно также присвоить переменной типа char, если оно находится в пределах допустимых
значений данного типа.
Целочисленные литералы можно определить и в двоичной форме. Для этого перед присваиваемым значением указывается префикс
ОЬ или ОВ. int х = Оb1010;
Обозначении целочисленных литералов можно также указывать один знак подчеркивания или более int х = 123_456_789;
Они также полезны для визуальных группировок при определении двоичных литералов. int х = 0b1101_0101_0001_1010;

Литералы с плавающей точкой
Числа с плавающей точкой представляют десятичные значения с дробной частью. Они могут быть выражены в стандартной или
экспоненциальной (или научной) форме записи. Число в стаидартиай форме записи состоит из целого числа с последующей
десятичной точкой и дробной частью. Например, значения 2.О, 3.14159 и О.6667 представляют допустимые числа с плавающей
точкой в стандартной записи. В экспоненциальной форме записи используется стандартная форма записи чисел с плавающей
точкой, дополненная суффиксом, обозначающим степень числа 10, на которую следует умножить данное число. Для указания
экспоненциальной части в данной форме записи используется символ Е или е, за которым следует десятичное число
(положительное или отрицательное). Примерами такой формы записи могут служить значения б.022Е23, 314159Е-05 и 2е+100.

По умолчанию в Java литералам с плавающей точкой присваивается тип douЫe. Чтобы указать литерал типа float, его следует
дополнить символом F или f.
Литерал типа douЫe можно также указать явно, дополнив символом D или d. Но это, конечно, излишне.

Шестнадцатеричные литералы с плавающей точкой также поддерживаются, но они применяются редко. Они должны быть записаны
в форме, подобной экспоненциальному представлению, но с обозначением Р или р вместо Е или е. Например, Ох12.2Р2 вполне
допустимый шестнадцатеричный литерал с плавающей точкой. Значение после буквы Р называется двоичным порядком и
обозначает степень числа два, на которое умножается заданное число. Поэтому литерал Ох12.2Р2 представляет число 72,5.

Литералы с плавающей точкой можно вводить один знак подчеркивания или больше, подобно описанному выше в отношении
целочисленных литералов. double num = 9_423_497_862.0;

Логические литералы
Тип boolean может иметь только два логических значения: true и false. Эти значения не преобразуются ни в одно из
числовых представлений. BJava логический литерал true не равен 1, а литерал false - О. Логические литералы в Java могут
присваиваться только тем переменным, которые объявлены как boolean, или употребляться в выражениях с логическими операциями.

Символьные литералы
В Java символы представляют собой индексы из набора символов в Юникоде. Это 16-разрядные значения, которые могут быть
преобразованы в целые значения и над которым можно выполнять такие целочисленные операции, как сложение и вычитание.
Символьные литералы заключаются в одинарные кавычки.Все отображаемые символы в коде ASCII можно вводить непосредственно,
заключая их в одинарные кавычки, например 'а', 'z' и '@'. Если символы нельзя ввести непосредственно, то для их ввода
можно воспользоваться рядом управляющих последовательностей, которые позволяют вводить нужные символы (например, символ
одинарной кавычки как ' \" или символ новой строки как ' \n' ). Существует также механизм для непосредственного ввода
значения символа в восьмеричной или шестнадцатеричной форме. Для ввода значений в восьмеричной форме служит символ
обратной косой черты, за которым следует трехзначное число. Например,последовательность символов '\ 41 ' равнозначна
букве 'а'. Для ввода значений в шестнадцатеричной форме применяются символы обратной косой черты и u(\u), а вслед за
ними следуют четыре шестнадцатеричные цифры. Например, литерал ' \u0061 ' представляет букву 'а' из набора символов
ISO-Latin-1, поскольку старший байт является нулевым, а литерал ' ua432 ' - символ японской катаканы.

Экранирование (управляющие последовательности)
\'      - одинарная кавычка
\''     - двойная ковычка
\\      - обратная косая черта
\r      - возврат каретки
\n      - перевод строки
\f      - перевод страницы
\t      - горизонтальная табуляция
\b      - возврат на одну позицию
\ddd    - восьмиричная константа
\uxxx   - шестнадцатиричная константа

Строковые литералы
Строковые литералы обозначаются в Java таким же образом, как и в других языках программирования. С этой целью
последовательность символов заключается в двойные кавычки. Управляющие символы и восьмеричная или шестнадцатеричная
форма записи, определенные для символьных литералов, действуют точно так же и в строковых литералах. Однако в Java
символьные строки должны начинаться и оканчиваться в одной строке.

Переменные
Переменная - это именованная ячейка памяти, которой может быть присвоено значение в программе.

Переменные представляют собой зарезервированную область памяти для хранения данных. В зависимости от типа переменной
операционная система выделяет память и решает, что именно должно в ней храниться.

Переменная служит основной единицей хранения данных в программе нa java. Переменная определяется в виде сочетания
идентификатора, типа и необязательного начального значения. Кроме того, у всех переменных имеется своя область действия,
которая определяет их доступность для других объектов и продолжительность существования.

Объявление переменной
В Java все переменные должны быть объявлены до их использования. double а = 3.0 , b = 4.0;

Динамическая инициализация
в Java допускается и динамическая инициализация переменных с помощью любого выражения, действительного в момент
объявления переменной. double с = Math.sqrt (a * а + b * b);


Область и срок действия переменных
Несмотря на возможность задать глобальную область действия, в настоящее время такой подход является скорее исключением,
чем правилом. Две основные области действия в Java определяются классом и методом, хотя такое их разделение несколько
искусственно.

Как правило, переменные, объявленные в области действия, не доступны из кода за пределами этой области. Таким образом,
объявление переменной в области действия обеспечивает ее локальность и защиту от несанкционированного доступа и/или
внешних изменений. В действительности правила функционирования обработки области действия составляют основу инкапсуляции.

Области действия могут быть вложенными. Так, вместе с каждым блоком кода, по существу, создается новая, вложенная
область действия. В таком случае внешняя область действия включает в себя внутреннюю область. Это означает, что объекты,
объявленные во внешней области действия, будут доступны для кода из внутренней области действия, но не наоборот.

Следует иметь в виду еще одну важную особенность: переменные создаются при входе в их область действия и уничтожаются
при выходе из нее. Это означает, что переменная утратит свое значение сразу же после выхода из ее области действия.
Таким образом, срок действия переменной ограничивается ее областью действия.

Несмотря на то, что блоки могут быть вложенными, во внутреннем блоке кода нельзя объявлять переменные с таким же именем,
что и во внешней области действия.

Преобраэование, и nриведение типов

Автоматическое преобразование типов в Java
Когда данные одного тиnа nрисваиваются переменной другого типа, выполняется автоматическое nреобразоеание типов,
если удовлетворяются два условия:
• оба типа совместимы;
• длина целевого типа больше длины исходного типа.
При соблюдении этих условий выполняется расширяющее преобразовани

Приведение несовместимых типов
Сужающим преобразование -> например приведение int к byte
Когда значение 257 приводится к типу byte, его результатом будет остаток от деления 257 на 256 (диапазон допустимых
значений типа byte)

Приведение - это всего лишь явное преобразование типов.

При присваивании значения с плавающей точкой переменной целочисленного типа выполняется другой вид преобразования
типов - усечение.

Автоматическое продвижение типов в выражениях
Помимо операций присваивания, определенное преобразование типов может выполняться и в выражениях. Это может происходить
в тех случаях, когда требующаяся точность промежуточного значения выходит за пределы допустимого диапазона значений
любого из операндов в выражении. Для разрешения подобных затруднений при вычислении выражений в Java тип каждого
операнда byte, short или char автоматически продвигается к типу int.

Правила продвижения типов
В языке Java определен ряд правил продвижения типов, применяемых к выражениям. Сначала все значения типа byte, short и
char продвигаются к типу int, как пояснялось выше. Затем тип всего выражения продвигается к типу long, если один из его
операндов относится к типу long. Если же один из операндов относится к типу float, то тип всего выражения продвигается
к типу float. А если любой из операндов относится к типу douЫe, то и результат вычисления всего выражения ОТНОСИТСЯ к
типу douЫe.


Массивы
Массив - это группа однотипных неременных, для обращения к которым испоюльзуется общее имя. В Java допускается соадание
массивов любого тина и разной размерности. Доступ к конкретному элементу массива осуществляется по его индексу. Массивы
предоставлякп удобный способ группирования связанной вместе информации.

Одномерные массивы
По существу, одномерные массивы нредставляют собой список однотипных переменных переменных.
объявление массива
Объявление переменной массива можно объединять с выделением для него памяти;
int[] arr = new int[5];

Массивы можно инициализировать при их объявлении.
Инициализатор массива - это список выражений, разделяемый запятыми и заключаемый в фигурные скобки.
int[] indexes = {1, 5, 6, 9, 23, 67, 67};

напечатать массив
System.out.println(Arrays.toString(arr));

массив хранится в heap

Многомерные массивы
В языке Java многомерные массивы представляют собой массивы массивов. Нетрудно догадаться, что они внешне выглядят и
действуют подобно обычным многомерным массивам.

Создание двумерного массива
int[][] arr = {{1, 2, 3}, {3, 4, 5}, {1, 8, 9, 80}};
int[][] arr = new int[5][5];

Выделяя память под многомерный массив, достаточно указать лишь первый (крайний слева) размер. Память под остальные
размеры массива можно выделять по отдельности.
int[][] table = new int[3][];
table[0] = new int[1];
table[1] = new int[5];
table[2] = new int[3];

Альтернативный синтаксис объявления массивов. Два следующих объявления массивов равнозначны.
int arr[] = new int[3];
int[] arr2 = new int[3];


Операции в java

1) Арифметические операции
Арифметические операции применяются в математематических выражениях таким же образом, как и в алгебре.

+   Сложение
-   Вычитание
*   Умножение
/   Деление
%   Деление по модулю
++  Инкремент (приращение на 1)
+=  Сложение с присваиванием
-=  Вычитание с присваиванием
*=  Умножение с присваиванием
/=  Деление с присваиванием
%=  Деление по модулю с присваиванием
--  Декремент (отрицательное приращение на 1)

2) Поразрядные операции
В языке Java определяется несколько поразрядных операций, которые можно выполнять над целочисленными типами данных:
long, int, short, char и byte. Эти операции воздействуют на отдельные двоичные разряды операндов.

Операция    Описание
~           Поразрядная унарная операция НЕ
&           Поразрядная логическая операция И
|           Поразрядная логическая операция ИЛИ
^           Поразрядная логическая операция исключающее ИЛИ
>>          Сдвиг вправо
>>>         Сдвиг вправо с заполнением нулями
<<          Сдвиг влево
&=          Поразрядная логическая операция И с присваиванием
|=          Поразрядная логическая операция ИЛИ с присваиванием
^=          Поразрядная логическая операция исключающее ИЛИ с присваивани
>>=         Сдвиг вправо с присваиванием
>>>=        Сдвиг вправо с заполнением нулями и присваиванием
<<=         Сдвиг влево с присваиванием

Операции отношения
Операции отношения, называемые иначе операциями сравнения, определяют отношение одного операнда к другому. В частности,
они определяют равенство и упорядочение.

Операция    Описание
==          Равно
!=          Не равно
>           Больше
<           Меньше
>=          Больше или равно
<=          Меньше или равно

Логические операции
Описываемые в этом разделе логические операции выполняются только с операндами типа boolean. Все логические операции с
двумя операндами соединяют два логических значения, образуя результирующее логическое значение.

Могут быть использованы следующие операторы сравнения.
Операция    Описание
&           Логическая операция И
|           Логическая операция ИЛИ
^           Логическая операция исключающее ИЛИ (true только если один из элементов true)
&&          Укороченное и
||          Укороченное или
!           Не
&=          Логическая операция И с присваиванием
|=          Логическая операция ИЛИ с присваиванием
^=          Логическая операция исключающее ИЛИ с присваиванием
==          Равенство
!=          Неравенство
?:          Тернарная условная операция типа если... ,то... , иначе ...

Укороченные логические операции
При использовании форм || и && этих операторов вместоформ | и & в программе нa java не будет вычисляться значение
правого операнда, если результат выражения можно определить по значению только левого операнда.
if ( denom != О && num / denom > 10) - не выкинет исключение при 0-ле, т.к. правая часть не будет вычисляться

Тернарный оперератор ?
В синтаксисе Java имеется специальная тернарная операция, которая обозначается знаком ? и которой можно заменить
определенные типы условных операторов вроде если . . . , то . .. , инд:че . .. ( if- then- else).
ratio = denom == О ? О : num / denom;

Применение круглых скобок
Круглые скобки повышают предшествование заключенных в них операций. Нередко это требуется для получения нужного результата.
Кроме изменения обычного предшествования операций, круглые скобки можно иногда использовать с целью упростить понимание
смысла выражения. Сложные выражения могут оказаться трудными для понимания. Добавление избыточных, но облегчающих
понимание круглых скобок может способствовать устранению недоразумений впоследствии.
а \ 4 + с >> Ь & 7
(а \ (((4 + с) » Ь) & 7 ))
И наконец, следует иметь в виду, что применение круглых скобок (избыточных или не избыточных) не ведет к снижению
производительности программы. Следовательно, добавление круглых скобок для повышения удобочитаемости исходного текста
программы не оказывает никакого влияния на эффективность ее работы.

Управляющие операторы
1) Операторы выбора (if и switch)
2) Операторы цикла (for, while и do-while)
3) Операторы перехода ( break, continue и return)

Вложенные операторы switch
Оператор switch можно использовать в последовательности операторов внешнего оператора switch. Такой оператор switch
называется вложенным.

Цикл do-while
Тело этого цикла всегда выполняется хотя бы один раз, поскольку его условное выражение проверяется в конце цикла.

for each
Применяя цикл for в стиле for each, не следует забывать о том, что его итерационная переменная доступна "только для
чтения", поскольку она связана только с исходным массивом. Присваивание значения итерационной переменной не оказывает
никакого влияния на исходный массив. Иначе говоря, содержимое массива нельзя изменить, присваивая новое значение
итерационной переменной.

Применение оператора break
1) завершает последовательность операторов в операторе switch
2) для выхода из цикла
3) в качестве "цивилизованной" формы оператора безусловного перехода goto

Использование оператора break для выхода из цикла
Используя оператор break, можно вызвать немедленное завершение цикла,пропуская условное выражение и любой остальной код
в теле цикла. Когда в теле цикла встречается оператор break, выполнение цикла прекращается и управление передается
оператору, следующему за циклом.
Если в программе применяется ряд вложенных циклов, то оператор break осуществляет выход только из самого внутреннего цикла.

Применение оператора break в качестве формы оператора qoto
break метка;
Чаще всего метка - это имя метки, обозначающее блок кода. Им может быть как самостоятельный блок кода, так и целевой
блок другого оператора. При выполнении этой формы оператора break управление передается блоку кода, помеченному меткой.
Такой блок кода должен содержать оператор break, но он не обязательно должен быть непосредственно объемлющим его блоком.
В частности, это означает, что оператор break с меткой можно применять для выхода из ряда вложенных блоков. Но его нельзя
использовать для передачи управления внешнему блоку кода, который не содержит данный оператор break.
    Чтобы пометить блок, достаточно поместить в его начале метку. Метка - это любой допустимый в Java идентификатор с
двоеточием. Как только блок помечен, его метку можно использовать в качестве адресата для оператора break. В итоге
выполнение программы будет продолжено с конца помеченного блока. Так, в приведенном ниже примере программа содержит три
вложенных блока, каждый из которых помечен отдельной меткой.
Одним из наиболее распространенных применений оператора break с меткой служит выход из вложенных циклов.

Применение оператора continue
В циклах while и do while оператор continue вызывает передачу управления непосредственно условному выражению,
управляющему циклом. В цикле for управление передается вначале итерационной части цикла for, а затем условному выражению.
Во всех трех видах циклов любой промежуточный код пропускается.
Как и оператор break, оператор continue может содержать метку объемлющего цикла, который нужно продолжить.

Оператор return
Оператор return можно использовать в любом месте метода для возврата управления тому объекту, который вызвал данный
метод. Следовательно, оператор return немедленно прекращает выполнение метода, в теле которого он находится.




Ввод данных из консоли
Scanner sc = new Scanner(System.in);    // создание объекта класса Scanner
int a = sc.nextInt();                   // чтение целого числа в переменную a
String b = sc.nextLine();               // чтение введенной строки
String c = sc.next();                   // слово до следующего пробела
sc.close();                             // после завершения работы со сканером его необходимо закрыть,

Аргументы переменной длинны - отдаём любое кол-во элементов, должен быть расположен последним и может быть только один в методе
private static void selectNumber(int ... args) {}

Константы - final, пишем с большой буквы
private static final int SIZE_X = 5;

Модификаторы доступа
Любой public член класса доступен из любой части программы. Компонент, объявленный как private, доступен только внутри
класса, в котором объявлен. Если в объявлении члена класса отсутствует явно указанный модификатор доступа (default),
то он доступен для подклассов и других классов из данного пакета. Если же требуется, чтобы элемент был доступен за
пределами его текущего пакета, но только классам, непосредственно производным от данного класса, то такой элемент должен
быть объявлен как protected.

1) private                      - Один и тот же класс
2)          (default/package)   - -//- + Подкласс, производный от класса из того же самого пакета, Класс из того же самого пакета, не являющийся подклассом
3) protected                    - -//- + Подкласс, производный от класса другого пакета
4) public                       - -//- + Класс из другого пакета, не являющийся подклассом, производный от класса данного пакета


Существует ещё два вариантамодификаторов доступа - transient и volatile
transient -  Когда переменная-экземпляр объявлена как transient , ее значение не должно сохраняться,когда сохраняется объект
Модификатор доступа volatile сообщает компилятору, что модифицируемая им переменная может быть неожиданно изменена в
других частях программы. Одна из таких ситуаций возникает в многопоточных программах, где иногда у двух или более потоков
исполнения имеется совместный доступ к одной и той же переменной.

Ключевое слово final
Существует несколько способов использования ключевого слова final:
1) создание именованной константы. final int MONTHS_COUNT = 12; значение нельзя изменить
2) предотвращение переопределения методов public final void run() {}
3) запрет наследования от текущего класса public final class A {}

Иногда методы, объявленные как final , могут способствовать увеличению производительности программы. Компилятор вправе
встраившпъ вызовы этих методов, поскольку ему извеспю, что они не будут переопределены в подклассе. Нередко при вызове
небольшого завершенного метода компилятор Java может встраивать байт-код для подпрограммы непосредственно в
скомпилированный код вызывающего метода, тем самым снижая издержки на вызов метода. Такая возможность встраивания
вызовов присуща только завершенным методам. Как правило, вызовы методов разрешаются в Java динамически во время
выполнения. Такой способ называется поздним связыванием. Но поскольку завершенные методы нс могут быть переопределены,
их вызовы могут быть разрешены во время компиляции. И такой способ называется ранним связыванием.

Ключевое слово static
static - поля хранятся в классах, а не в объектах, статику можем вызывать без создания объекта. Статику нужно
использовать там, где они не привязаны к состоянию объекта, например в утлитных методах и т.п.
Из статики нельзя обратися к нестатике, т.к. непонятно к чему обращаться, объектов может и не быть, может быть больше одного и т.п.
Из нестатики в статику обращаться можно.

На методы, объявленные как static, накладываются следующие ограничения:
1. Они могут непосредственно вызывать только другие статические методы.
2. Им непосредственно доступны только статические переменные.
3. Они никоим образом не могут использовать ссылки типа this или super.

За пределами класса, в котором определены статические методы и переменные, ими можно пользоваться независимо от любого
объекта. Для этого достаточно указать имя их класса через операцию-точку непосредственно перед их именами.

Применение аргументов командной строки
Иногда определенную информацию требуется передать программе во время ее запуска. Для этой цели служат аргументы
командной строки для метода main ( ) . Арrумент командной стрики - это информация, которая во время запуска программы
указывается в командной строке непосредственно после ее имени. Доступ к аргументам командной строки в программе нa java
не представляет особого труда, поскольку они хранятся в виде символьных строк в массиве типа S t ring, передаваемого
методу main ( ) . Первый аргумент командной строки хранится в элементе массива args [О] , второй - в элементе args [1] и т.д

Попробуйте выполнить эту программу, введя следующую команду в командной строке:
java CommandLine this is а test 100 -1

Аргументы переменной длины
varargs (variable-length arguments - аргументы переменной длины). Метод, который принимает переменное количество
аргументов, называется методом с аргументами переменной длины
static void vaTe st ( int ... v) {}
В этой синтаксической конструкции компилятору предписывается, что метод vaTest ( ) может вызываться без аргументов или
с несколькими аргументами. В итоге массив v неявно объявляется как массив типа int []. Таким образом, в теле метода
vaTest () доступ к массиву v осуществляется с помощью синтаксиса обычного массива.

Наряду с параметром переменной длины у метода могут быть и "обычные" параметры. Но параметр переменной длины должен быть
последним среди всех параметров, объявляемых в методе. Например, следующее объявление метода вполне допустимо:
int doi t ( int а, int Ь, douЫe с, int ... vals) {}









