Объектно - ориентиравнное програмирование (ООП)
Абстракция

Три принципа ООП
1) Инкапсуляция - механизм, связывающий код и данные, которыми он манипулирует, защищая оба эти компонента от внешнего
вмешательства и злоупотреблений. Основу инкапсуляции в Java составляет класс.

//todo перенести определние класса к классам, интерфейсам и т.п.
Класс определяет структуру и поведение (данные и код), которые будут совместно использоваться набором объектов. Каждый
объект данного класса содержит структуру и поведение, которые определены классом, как если бы объект был "отлит" в форме
класса. Поэтому иногда объекты называют экземплярами класса. Таким образом, класс - это логическая конструкция, а объект
- ее физическое воплощение.

При создании класса определяются код и данные, которые образуют этот класс. Совместно эти элементы называются
экземплярами класса. В частности, определенные в классе данные называются переменными-членами, или переменными экземпляра,
а код, оперирующий данными, методами-членами, или просто методами.
Открытый интерфейс класса представляет все, что должны или могут знать внешние пользователи класса. Закрытые методы и
данные могут быть доступны только для кода, который является членом данного класса. Следовательно, любой другой код, не
являющийся членом данного класса, не может получать доступ к закрытому методу или переменной. Закрытые члены класса
доступны другим частям программы только через открытые методы класса, и благодаря этому исключается возможность
выполнения неправомерных действий.

2) Наследование - процесс, в результате которого один объект получает свойства другого.
Суперклассы (родительские классы) и подклассы.
Наследование связано также с инкапсуляцией. Если отдельный класс инкапсулирует определенные свойства, то любой его
подкласс будет иметь те же самые свойства плюс любые дополнительные, определяющие его специализацию. Благодаря этому
ключевому принципу сложность объектно-ориентированных программ нарастает в арифметической, а не геометрической прогрессии.

3) Полиморфизм - ( от греч. "много форм") - это принцип ООП, позволяющий использовать один и тот же интерфейс для
общего класса действий. Каждое действие зависит от конкретной ситуации. В более общем с мысле принцип п олиморфизма
нередко выражается фразой " один интерфейс, несколько методов". Это означает, что можно разработать общий интерфейс
для группы с вязанных вместе действий. Такой подход позволяет уменьшить сложность программы, поскольку один и тот же
интерфейс с лужитдля указания общего класса действий. А выбор конкретного действия (т. е. метода) делается применительно
к каждой ситуации и входит в обязанности компилятора.

Компиляция программы
С:\> javac Example.java - Компилятор javac создаст файл Example.class , содержащий версию байткода. Байт-код Java
является промежуточным представлением программы, содержащим инструкции, которые будет выполнять виртуальная машина JVМ.

C:\> java Example - вызов загрузчика приложений jаvа, который называется java. Ему нужно передать имя класса Example в
качестве аргумента командной строки

Использование блоков кода
В языке Java два и более оператора допускается группировать в маки кода, называемые также кодовъLМи маками. С этой
целью операторы заключают в фигурные скобки. Сразу после своего создания блок кода становится логической единицей, и
поэтому выполнение одной части блока невозможно без выполнения другой части блока. Блоки кода обладают дополнительными
свойствами и областями применения. Но их основное назначение - создание логически неразрывных единиц кода.

Лексика
Исходный текст программ на Java состоит из совокупности пробелов, идентификаторов, литералов, комментариев, операторов,
разделителей и ключевых слов.

Пробелы
Java - язык свободной формы. Это означает, что при написании программы не нужно следовать каким-то специальным правилам
в отношении отступов. Единственное обязательное требование - наличие, по меньшей мере, одного пробела между всеми
лексемами, которые еще не разграничены оператором или разделителем. В языке Java пробелами считаются символы пробела,
табуляции или новой строки.

Идентификаторы
Для именования классов, методов и переменных служат идентификаторы. Идентификатором может быть любая последовательность
строчных и прописных букв, цифр или символов подчеркивания и денежной единицы. (Знак денежной единицы не предназначается
для общего использования.) Идентификаторы не должны начинаться с цифры, чтобы компилятор не путал их с числовыми
константами. Напомним еще раз, что в J ava учитывается регистр символов, и поэтому VALUE и Value считаются разными
идентификаторами.

Литералы
В Java постоянное значение задается его литералъным представлением. В качестве примера ниже показано несколько литералов.
Литерал можно использовать везде, где допустимо применение значений данного типа.

Комментарии - 3 вида
1) Односторочные //
2) Многострочные /*   */
3) Документирующий /** */ Этот вид комментариев служит для создания НТМL-файла документации на программу.

Разделители
В Java допускается применение нескольких символов в качестве разделителей. Чаще всего в качестве разделителя
употребляется точка с запятой, но точка с запятой употребляется также для завершения строк операторов. Символы,
допустимые в качестве разделителей, перечислены в табл. 2.2.

( ) Круглые скобки    - Употребляются для передачи списков параметров в определениях и вызовах методов. Применяются также
                        для обозначения операции приведения типов и предшествования операторов в выражениях, употребляемых
                        в управляющих операторах

{ } Фигурные скобки   - Употребляются для указания значений автоматически инициализируемых массивов, а также для определения
                        блоков кода, классов, методов и локальных областей действия

[ ] Квадратные скобки - Употребляются для объявления типов массивов, а также при обращении к элементам массивов

:   Точка с запятой   - Завершает операторы

,   Запятая           - Разделяет последовательный ряд идентификаторов в объявлениях переменных. Применяются также для
                        создания цепочек операторов в операторе цикла for

.   Точка             - Употребляется для отделения имен пакетов от подпакетов и классов, а также для отделения
                        переменной или метода от ссылочной переменной

Ключевые слова Java
В настоящее время в языке Java определено 50 ключевых слов, которые вместе с синтаксисом операторов и разделителей
образуют основу языка Java. Их нельзя использовать ни в качестве идентификаторов, ни для обозначения имен переменных,
классов или методов.
Кроме ключевых слов, в Java зарезервированы также слова true, false и null. Они представляют значения, определенные в
спецификации языка java. Их нельая использовать для обозначения имен переменных, классов и т.п.

В более широком смысле среда Java опирается на несколько встроенных библиотек классов, содержащих многие встроенные
методы, обеспечивающие подцержку таких операций, как ввод-вывод, обработка символьных строк, работа в сети и отображение
графиков. Стандартные классы обеспечивают также подцержку ГПИ. Таким образом, среда Java в целом состоит из самого языка
Java и его стандартных классов.



Переменные и типы данных
Переменная - это именованная ячейка памяти, которой может быть присвоено значение в программе.

Переменные представляют собой зарезервированную область памяти для хранения данных. В зависимости от типа переменной
операционная система выделяет память и решает, что именно должно в ней храниться.
В Java существует две группы типов данных.
● Примитивные.
● Ссылочные (объектные)

byte    - 8-битное знаковое целое число                                     от -128 до 127
short   - 16-битное знаковое целое число                                    от -32_768 до 32_767
int     - 32-битное знаковое целое число                                    от -2_147_483_648 до 2_147_483_647 (2 трл.)
long    - 64-битное знаковое целое число                                    от -9_223_372_036_854_775_808 до 9_223_372_036_854_775_807
float   - 32-битное знаковое число с плавающей запятой одинарной точности
double  - 64-битное знаковое число с плавающей запятой двойной точности
char    - 16-битный тип данных, предназначенный для хранения символов
в кодировке Unicode                                                         от '\u0000' или 0 до '\uffff' или 65,535
boolean - логический тип данных                                             false, true

Если вы хотите указать float величину, то после числа необходимо поставить букву f. float floatVal = 12.24f;
Если буква указана не будет, то компилятор будет считать такое дробное число типом double.
При использовании переменной типа long, после числа необходимо ставить букву L. long longValue = 20000000000L;

Идентификаторы – это имена переменных, которые начинаются с буквы, $ или _, после чего может идти любая последовательность
символов. Идентификаторы чувствительны к регистру.
В качестве идентификаторов нельзя использовать ключевые слова Java.

Арифметические операции
+   Сложение
-   Вычитание
*   Умножение
/   Деление
%   Деление по модулю
++  Инкремент (приращение на 1)
+=  Сложение с присваиванием
-=  Вычитание с присваиванием
*=  Умножение с присваиванием
/=  Деление с присваиванием
%=  Деление по модулю с присваиванием
--  Декремент (отрицательное приращение на 1)

Условный оператор if
Могут быть использованы следующие операторы сравнения.
<   Меньше
<=  Меньше или равно
>   Больше
>=  Больше или равно
==  Равно
!=  Не равно
&   и
&&  укороченное и
|   или
||  укороченное или
!   не
^   исключающее или (true только если один из элементов true)

Экранирование
\'      - одинарная кавычка
\''     - двойная ковычка
\\      - обратная косая черта
\r      - возврат каретки
\n      - перевод строки
\f      - перевод страницы
\t      - горизонтальная табуляция
\b      - возврат на одну позицию
\ddd    - восьмиричная константа
\uxxx   - шестнадцатиричная константа

Тернарный оперератор ?

Массивы

объявление массива
int[] arr = new int[5];
int[] indexes = {1, 5, 6, 9, 23, 67, 67};

напечатать массив
System.out.println(Arrays.toString(arr));

массив хранится в heap

Создание двумерного массива
int[][] arr = {{1, 2, 3}, {3, 4, 5}, {1, 8, 9, 80}};
int[][] arr = new int[5][5];
Выделяя память под многомерный массив, достаточно указать лишь первый (крайний слева) размер. Память под остальные
размеры массива можно выделять по отдельности.
int[][] table = new int[3][];
table[0] = new int[1];
table[1] = new int[5];
table[2] = new int[3];

Альтернативный синтаксис объявления массивов. Два следующих объявления массивов равнозначны.
int arr[] = new int[3];
int[] arr2 = new int[3];

Ввод данных из консоли
Scanner sc = new Scanner(System.in);    // создание объекта класса Scanner
int a = sc.nextInt();                   // чтение целого числа в переменную a
String b = sc.nextLine();               // чтение введенной строки
String c = sc.next();                   // слово до следующего пробела
sc.close();                             // после завершения работы со сканером его необходимо закрыть,

Использование System.out.printf
System.out.printf("Слово: %s, Число с плавающей запятой: %f, Целое число: %d,
Символ: %c", "Java", 2.5f, 20, 'e');
Результат:
Слово: Java, Число с плавающей запятой: 2,500000, Целое число: 20, Символ: e

Перегруженные методы, когда в метод с одинаковым названием отдаем разное кол-во или типы аргументов, возвращаемые типы
тоже могут быть другими. Например System.out.println() - перегруженные метод, отдаем туда любой тип данных.

Перегрузка конструкторов
Наряду с перегрузкой обычных методов возможна перегрузка и конструкторов. Мы можем как не объявлять ни одного
конструктора, так и объявить их несколько. Также как и при перегрузке методов, имеет значение набор аргументов,
не может быть нескольких конструкторов с одним и тем же набором аргументов.

Аргументы переменной длинны - отдаём любое кол-во элементов, должен быть расположен последним и может быть только один в методе
private static void selectNumber(int ... args) {}

Константы - final, пишем с большой буквы
private static final int SIZE_X = 5;

ООП
Поля объектов инициализируются по умолчанию
Локальные переменные по умолчанию не инициализируются и должны быть проинициализированы вручную

static - поля хранятся в классах, а не в объектах, статику можем вызывать без создания объекта. Статику нужно
использовать там, где они не привязаны к состоянию объекта, например в утлитных методах и т.п.
Из статики нельзя обратися к нестатике, т.к. непонятно к чему обращаться, объектов может и не быть, может быть больше одного и т.п.
Из нестатики в статику обращаться можно.

На методы, объявленные как static, накладываются следующие ограничения:
1. Они могут непосредственно вызывать только другие статические методы.
2. Им непосредственно доступны только статические переменные.
3. Они никоим образом не могут использовать ссылки типа this или super.

Модификаторы доступа
Любой public член класса доступен из любой части программы. Компонент, объявленный как private, доступен только внутри
класса, в котором объявлен. Если в объявлении члена класса отсутствует явно указанный модификатор доступа (default),
то он доступен для подклассов и других классов из данного пакета. Если же требуется, чтобы элемент был доступен за
пределами его текущего пакета, но только классам, непосредственно производным от данного класса, то такой элемент должен
быть объявлен как protected.

1) private                  - Один и тот же класс
2)              (default)   - -//- + Подкласс, производный от класса из того же самого пакета, Класс из того же самого пакета, не являющийся подклассом
3) protected                - -//- + Подкласс, производный от класса другого пакета
4) public                   - -//- + Класс из другого пакета, не являющийся подклассом, производный от класса данного пакета








