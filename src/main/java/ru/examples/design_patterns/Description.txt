S: Single Responsibility Principle (Принцип единственной ответственности).
O: Open-Closed Principle (Принцип открытости-закрытости).
L: Liskov Substitution Principle (Принцип подстановки Барбары Лисков).
I: Interface Segregation Principle (Принцип разделения интерфейса).
D: Dependency Inversion Principle (Принцип инверсии зависимостей).

S - Каждый класс должен решать лишь одну задачу.
    Класс должен быть ответственен лишь за что-то одно. Если класс отвечает за решение нескольких задач,
    его подсистемы, реализующие решение этих задач, оказываются связанными друг с другом.
    Изменения в одной такой подсистеме ведут к изменениям в другой.

O - Программные сущности (классы, модули, функции) должны быть открыты для расширения, но не для модификации.

L - Принцип подстановки Барбары Лисков
    Необходимо, чтобы подклассы могли бы служить заменой для своих суперклассов.
    Цель этого принципа заключаются в том, чтобы классы-наследники могли бы использоваться вместо родительских классов,
    от которых они образованы, не нарушая работу программы. Если оказывается, что в коде проверяется тип класса,
    значит принцип подстановки нарушается.

I - Создавайте узкоспециализированные интерфейсы, предназначенные для конкретного клиента.
    Клиенты не должны зависеть от интерфейсов, которые они не используют.
    Этот принцип направлен на устранение недостатков, связанных с реализацией больших интерфейсов.


D - Принцип инверсии зависимостей
    Объектом зависимости должна быть абстракция, а не что-то конкретное.
    Модули верхних уровней не должны зависеть от модулей нижних уровней. Оба типа модулей должны зависеть от абстракций.
    Абстракции не должны зависеть от деталей. Детали должны зависеть от абстракций.

Принципы проектирования:
1) Выделите аспекты приложения, которые могут изменяться, и отделите их от тех, которые всегда остаются постоянными
2) Программируйте на уровне интерфейса, а не на уровне реализации
3) Отдавайте предпочтение композиции перед наследованием
4) Стремитесь к слабой связанности взаимодействующих объектов
5) Классы должны быть открыты для расширения, но закрыты для изменения.
6) Код должен зависеть от абстракций, а не от конкретных классов
